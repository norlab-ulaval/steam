//////////////////////////////////////////////////////////////////////////////////////////////
/// \file DoglegGaussNewtonSolver.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_DOGLEG_GAUSS_NEWTON_SOLVER_HPP
#define STEAM_DOGLEG_GAUSS_NEWTON_SOLVER_HPP

#include <Eigen/Core>

#include <steam/solver/GaussNewtonSolverBase.hpp>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Solver using Powell's Dogleg for the trust region
//////////////////////////////////////////////////////////////////////////////////////////////
class DoglegGaussNewtonSolver : public GaussNewtonSolverBase
{
public:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Dogleg parameters
  //////////////////////////////////////////////////////////////////////////////////////////////
  struct Params : public SolverBase::Params {

    //////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief Default constructor
    //////////////////////////////////////////////////////////////////////////////////////////////
    Params() : SolverBase::Params(), ratioThresholdShrink(0.25), ratioThresholdGrow(0.75),
      shrinkCoeff(0.5), growCoeff(3.0), maxShrinkSteps(50) {
    }

    /// Minimum ratio of actual to predicted cost reduction, shrink trust region if lower (range: 0.0-1.0)
    double ratioThresholdShrink;

    /// Grow trust region if ratio of actual to predicted cost reduction above this (range: 0.0-1.0)
    double ratioThresholdGrow;

    /// Amount to shrink by (range: <1.0)
    double shrinkCoeff;

    /// Amount to grow by (range: >1.0)
    double growCoeff;

    /// Maximum number of times to shrink trust region before giving up
    unsigned int maxShrinkSteps;

  };

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  DoglegGaussNewtonSolver(OptimizationProblem* problem, const Params& params = Params());

private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Build the system, solve for a step size and direction, and update the state
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool linearizeSolveAndUpdate(double* newCost, double* gradNorm);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Casts parameters to base type (for SolverBase class)
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual const SolverBase::Params& getSolverBaseParams() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Parameters
  //////////////////////////////////////////////////////////////////////////////////////////////
  Params params_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Trust region size
  //////////////////////////////////////////////////////////////////////////////////////////////
  double trustRegionSize;

};

} // steam

#endif // STEAM_DOGLEG_GAUSS_NEWTON_SOLVER_HPP
