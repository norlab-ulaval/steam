//////////////////////////////////////////////////////////////////////////////////////////////
/// \file SteamTrajPriorFactor.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_TRAJECTORY_PRIOR_FACTOR_HPP
#define STEAM_TRAJECTORY_PRIOR_FACTOR_HPP

#include <Eigen/Core>

#include <steam/trajectory/SteamTrajInterface.hpp>
#include <steam/evaluator/ErrorEvaluator.hpp>

namespace steam {
namespace se3 {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Gaussian-process prior evaluator
//////////////////////////////////////////////////////////////////////////////////////////////
class SteamTrajPriorFactor : public ErrorEvaluatorX
{
 public:

  /// Shared pointer typedefs for readability
  typedef std::shared_ptr<SteamTrajPriorFactor> Ptr;
  typedef std::shared_ptr<const SteamTrajPriorFactor> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  SteamTrajPriorFactor(const SteamTrajVar::ConstPtr& knot1,
                       const SteamTrajVar::ConstPtr& knot2);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns whether or not an evaluator contains unlocked state variables
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool isActive() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Evaluate the GP prior factor
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::VectorXd evaluate() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Evaluate the GP prior factor and Jacobians
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::VectorXd evaluate(const Eigen::MatrixXd& lhs, std::vector<Jacobian<> >* jacs) const;

 private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief First (earlier) knot
  //////////////////////////////////////////////////////////////////////////////////////////////
  SteamTrajVar::ConstPtr knot1_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Second (later) knot
  //////////////////////////////////////////////////////////////////////////////////////////////
  SteamTrajVar::ConstPtr knot2_;
};

} // se3
} // steam

#endif // STEAM_TRAJECTORY_PRIOR_FACTOR_HPP

