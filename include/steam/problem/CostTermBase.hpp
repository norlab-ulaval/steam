//////////////////////////////////////////////////////////////////////////////////////////////
/// \file CostTermBase.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_COST_TERM_BASE_HPP
#define STEAM_COST_TERM_BASE_HPP

#include <steam/state/StateVector.hpp>
#include <steam/blockmat/BlockSparseMatrix.hpp>
#include <steam/blockmat/BlockVector.hpp>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Interface for a 'cost term' class that contributes to the objective function.
///        Functions must be provided to calculate the scalar 'cost' and to build the
///        contributions to the Gauss-Newton system of equations.
//////////////////////////////////////////////////////////////////////////////////////////////
class CostTermBase
{
 public:

  /// Convenience typedefs
  typedef std::shared_ptr<CostTermBase> Ptr;
  typedef std::shared_ptr<const CostTermBase> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  CostTermBase() {}

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Compute the cost to the objective function
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual double cost() const = 0;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns the number of cost terms contained by this object (typically 1)
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual unsigned int numCostTerms() const = 0;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns whether or not the implementation already uses multi-threading
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool isImplParallelized() const = 0;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Add the contribution of this cost term to the left-hand (Hessian) and right-hand
  ///        (gradient vector) sides of the Gauss-Newton system of equations.
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual void buildGaussNewtonTerms(const StateVector& stateVector,
                                     BlockSparseMatrix* approximateHessian,
                                     BlockVector* gradientVector) const = 0;
};

} // steam

#endif // STEAM_COST_TERM_BASE_HPP
