//////////////////////////////////////////////////////////////////////////////////////////////
/// \file L2LossFunction.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_L2_LOSS_FUNCTION_HPP
#define STEAM_L2_LOSS_FUNCTION_HPP

#include <Eigen/Core>

#include <steam/problem/lossfunc/LossFunctionBase.hpp>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief 'L2' loss function
//////////////////////////////////////////////////////////////////////////////////////////////
class L2LossFunc : public LossFunctionBase
{
public:

  /// Convenience typedefs
  typedef std::shared_ptr<L2LossFunc> Ptr;
  typedef std::shared_ptr<const L2LossFunc> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  L2LossFunc() {}

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Cost function (basic evaluation of the loss function)
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual double cost(double whitened_error_norm) const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Weight for iteratively reweighted least-squares (influence function div. by error)
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual double weight(double whitened_error_norm) const;
};

} // steam

#endif // STEAM_L2_LOSS_FUNCTION_HPP
