//////////////////////////////////////////////////////////////////////////////////////////////
/// \file HuberLossFunc.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_HUBER_LOSS_FUNCTION_HPP
#define STEAM_HUBER_LOSS_FUNCTION_HPP

#include <Eigen/Core>

#include <steam/problem/lossfunc/LossFunctionBase.hpp>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Huber loss function class
//////////////////////////////////////////////////////////////////////////////////////////////
class HuberLossFunc : public LossFunctionBase
{
 public:

  /// Convenience typedefs
  typedef std::shared_ptr<HuberLossFunc> Ptr;
  typedef std::shared_ptr<const HuberLossFunc> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor -- k is the `threshold' based on number of std devs (1-3 is typical)
  //////////////////////////////////////////////////////////////////////////////////////////////
  HuberLossFunc(double k) : k_(k) {}

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Cost function (basic evaluation of the loss function)
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual double cost(double whitened_error_norm) const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Weight for iteratively reweighted least-squares (influence function div. by error)
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual double weight(double whitened_error_norm) const;

 private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Huber constant
  //////////////////////////////////////////////////////////////////////////////////////////////
  double k_;
};

} // steam

#endif // STEAM_HUBER_LOSS_FUNCTION_HPP
