//////////////////////////////////////////////////////////////////////////////////////////////
/// \file LossFunctionBase.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_LOSS_FUNCTION_BASE_HPP
#define STEAM_LOSS_FUNCTION_BASE_HPP

#include <memory>

#include <Eigen/Core>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Base loss function class. A loss function must implement both the cost and
///        weight functions. For example, the basic least-square L2 loss function has:
///        cost: e^2, and weight: 1.
//////////////////////////////////////////////////////////////////////////////////////////////
class LossFunctionBase
{
public:

  /// Convenience typedefs
  typedef std::shared_ptr<LossFunctionBase> Ptr;
  typedef std::shared_ptr<const LossFunctionBase> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  LossFunctionBase() = default;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Destructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual ~LossFunctionBase() = default;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Cost function (basic evaluation of the loss function)
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual double cost(double whitened_error_norm) const = 0;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Weight for iteratively reweighted least-squares (influence function div. by error)
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual double weight(double whitened_error_norm) const = 0;

};

} // steam

#endif // STEAM_LOSS_FUNCTION_BASE_HPP
