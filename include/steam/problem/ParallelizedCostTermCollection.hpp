//////////////////////////////////////////////////////////////////////////////////////////////
/// \file ParallelizedCostTermCollection.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_PARALLELIZED_COST_TERM_COLLECTION_HPP
#define STEAM_PARALLELIZED_COST_TERM_COLLECTION_HPP

#include <steam/problem/CostTermBase.hpp>

//////////////////////////////////////////////////////////////////////////////////////////////
/// The define STEAM_DEFAULT_NUM_OPENMP_THREADS can be used to set the default template
/// parameter for the number of threads that process a collection of cost terms. Note that
/// this define can be set in CMake with the following command:
///
/// add_definitions(-DSTEAM_DEFAULT_NUM_OPENMP_THREADS=4)
///
/// If it is not user defined, we default it to 4.
//////////////////////////////////////////////////////////////////////////////////////////////
#ifndef STEAM_DEFAULT_NUM_OPENMP_THREADS
#define STEAM_DEFAULT_NUM_OPENMP_THREADS 4
#endif

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Class that fully defines a nonlinear cost term (or 'factor').
///        Cost terms are composed of an error function, loss function and noise model.
//////////////////////////////////////////////////////////////////////////////////////////////
class ParallelizedCostTermCollection : public CostTermBase
{
 public:

  /// Convenience typedefs
  typedef std::shared_ptr<ParallelizedCostTermCollection> Ptr;
  typedef std::shared_ptr<const ParallelizedCostTermCollection> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  ParallelizedCostTermCollection(unsigned int numThreads = STEAM_DEFAULT_NUM_OPENMP_THREADS);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Add a cost term
  //////////////////////////////////////////////////////////////////////////////////////////////
  void add(const CostTermBase::ConstPtr& costTerm);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Compute the cost from the collection of cost terms
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual double cost() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns the number of cost terms contained by this object
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual unsigned int numCostTerms() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns whether or not the implementation already uses multi-threading
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool isImplParallelized() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Build the left-hand and right-hand sides of the Gauss-Newton system of equations
  ///        using the cost terms in this collection.
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual void buildGaussNewtonTerms(const StateVector& stateVector,
                                     BlockSparseMatrix* approximateHessian,
                                     BlockVector* gradientVector) const;

  virtual std::vector<double> costs() const;
 private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Number of threads
  //////////////////////////////////////////////////////////////////////////////////////////////
  const unsigned int numThreads_;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Collection of nonlinear cost-term factors
  //////////////////////////////////////////////////////////////////////////////////////////////
  std::vector<CostTermBase::ConstPtr> costTerms_;
};

} // steam

#endif // STEAM_PARALLELIZED_COST_TERM_COLLECTION_HPP
