//////////////////////////////////////////////////////////////////////////////////////////////
/// \file StateVariable-inl.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#include <steam/state/StateVariable.hpp>

namespace steam {

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Constructor based on perturbation dimension
/////////////////////////////////////////////////////////////////////////////////////////////
template<typename TYPE>
StateVariable<TYPE>::StateVariable(unsigned int perturbDim) : StateVariableBase(perturbDim), value_(TYPE()) {
}

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Construct from TYPE instance and perturbation dimension
/////////////////////////////////////////////////////////////////////////////////////////////
template<typename TYPE>
StateVariable<TYPE>::StateVariable(TYPE t, unsigned int perturbDim) : StateVariableBase(perturbDim), value_(t) {
}

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Get current value
/////////////////////////////////////////////////////////////////////////////////////////////
template<typename TYPE>
const TYPE& StateVariable<TYPE>::getValue() const {
  return value_;
}

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Set current value
/////////////////////////////////////////////////////////////////////////////////////////////
template<typename TYPE>
void StateVariable<TYPE>::setValue(const TYPE& value) {
  value_ = value;
}

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Set value from another instance of the state variable
/////////////////////////////////////////////////////////////////////////////////////////////
template<typename TYPE>
void StateVariable<TYPE>::setFromCopy(const StateVariableBase::ConstPtr& other) {
  if (!this->getKey().equals(other->getKey())) {
    throw std::invalid_argument("State variable keys did not match in setFromCopy()");
  }
  StateVariable<TYPE>::ConstPtr p = std::static_pointer_cast<const StateVariable<TYPE> >(other);
  value_ = p->value_;
}

} // steam
