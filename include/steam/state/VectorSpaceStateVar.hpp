//////////////////////////////////////////////////////////////////////////////////////////////
/// \file VectorSpaceStateVar.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_VECTOR_SPACE_STATE_VARIABLE_HPP
#define STEAM_VECTOR_SPACE_STATE_VARIABLE_HPP

#include <steam/state/StateVariable.hpp>

namespace steam {

/////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Vector space (real space) state variable
/////////////////////////////////////////////////////////////////////////////////////////////
class VectorSpaceStateVar : public StateVariable<Eigen::VectorXd>
{
 public:

  /// Convenience typedefs
  typedef std::shared_ptr<VectorSpaceStateVar> Ptr;
  typedef std::shared_ptr<const VectorSpaceStateVar> ConstPtr;

  /////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Construct from Eigen vector (perturbation dimension assumed to match vector)
  /////////////////////////////////////////////////////////////////////////////////////////////
  VectorSpaceStateVar(Eigen::VectorXd v);

  /////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Destructor
  /////////////////////////////////////////////////////////////////////////////////////////////
  virtual ~VectorSpaceStateVar() {}

  /////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Update the vector space state variable via an additive perturbation:
  ///          this += perturbation
  /////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool update(const Eigen::VectorXd& perturbation);

  /////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Clone method
  /////////////////////////////////////////////////////////////////////////////////////////////
  virtual StateVariableBase::Ptr clone() const;

};

} // steam

#endif // STEAM_VECTOR_SPACE_STATE_VARIABLE_HPP
