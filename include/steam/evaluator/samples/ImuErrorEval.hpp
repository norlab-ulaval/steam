//////////////////////////////////////////////////////////////////////////////////////////////
/// \file ImuErrorEval.hpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_IMU_ERROR_EVALUATOR_HPP
#define STEAM_IMU_ERROR_EVALUATOR_HPP

#include <steam.hpp>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Error evaluator for a measured vector space state variable
//////////////////////////////////////////////////////////////////////////////////////////////
class ImuErrorEval : public ErrorEvaluator<6,6>::type
{
public:

  /// Convenience typedefs
  typedef std::shared_ptr<ImuErrorEval> Ptr;
  typedef std::shared_ptr<const ImuErrorEval> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor
  //////////////////////////////////////////////////////////////////////////////////////////////
  ImuErrorEval(const Eigen::Matrix<double,6,1>& measurement,
                       const Eigen::Matrix3d& C_body_enu,
                       const VectorSpaceStateVar::ConstPtr& varpi,
                       const VectorSpaceStateVar::ConstPtr& varpi_dot,
                       const VectorSpaceStateVar::ConstPtr& imu_bias,
                       const lgmath::se3::Transformation& T_s_v);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns whether or not an evaluator contains unlocked state variables
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool isActive() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Evaluate the measurement error
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::Matrix<double,6,1> evaluate() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Evaluate the measurement error and relevant Jacobians
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::Matrix<double,6,1> evaluate(
      const Eigen::Matrix<double,6,6>& lhs,
      std::vector<Jacobian<6,6> >* jacs) const;

private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Measurement vector
  //////////////////////////////////////////////////////////////////////////////////////////////
  Eigen::Matrix<double,6,1> meas_;

  Eigen::Matrix3d C_body_enu_;

  ////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Vectorspace state variable
  //////////////////////////////////////////////////////////////////////////////////////////////
  VectorSpaceStateVar::ConstPtr varpi_;
  VectorSpaceStateVar::ConstPtr varpi_dot_;
  VectorSpaceStateVar::ConstPtr imu_bias_;

  Eigen::Vector3d gravity_;

  Eigen::Matrix<double,6,6> adT_s_v_;

};

} // steam

#endif // STEAM_IMU_ERROR_EVALUATOR_HPP
