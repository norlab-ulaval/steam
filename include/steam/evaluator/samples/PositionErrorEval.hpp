//////////////////////////////////////////////////////////////////////////////////////////////
/// \file PositionErrorEval.hpp
///
/// \author Kai van Es, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#ifndef STEAM_POSITION_ERROR_EVALUATOR_HPP
#define STEAM_POSITION_ERROR_EVALUATOR_HPP

#include <steam.hpp>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Linear component of the transformation error function evaluator.  Used for
///        position only sensors like GPS.
//////////////////////////////////////////////////////////////////////////////////////////////
class PositionErrorEval : public ErrorEvaluator<3, 6>::type {
public:

  /// Convenience typedefs
  typedef std::shared_ptr<PositionErrorEval> Ptr;
  typedef std::shared_ptr<const PositionErrorEval> ConstPtr;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor - error is difference between linear component of 'T' and zero
  //////////////////////////////////////////////////////////////////////////////////////////////
  PositionErrorEval(const se3::TransformEvaluator::ConstPtr &T);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Convenience constructor - linear error between meas_r_21_in1 and T_21
  /// \param meas_r_21_in1 Position of frame 2 wrt frame 1, expressed in frame 1
  /// \param T_21 Transformation from frame 1 to frame 2
  //////////////////////////////////////////////////////////////////////////////////////////////
  PositionErrorEval(const Eigen::Vector3d &meas_r_21_in1,
                    const se3::TransformEvaluator::ConstPtr &T_21);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Convenience constructor - linear error between meas_r_21_in1 and T_20*inv(T_10)
  /// \param meas_r_21_in1 Position of frame 2 wrt frame 1, expressed in frame 1
  /// \param T_20 Transformation from the world frame (0) to frame 2
  /// \param T_10 Transformation from the world frame (0) to frame 1
  //////////////////////////////////////////////////////////////////////////////////////////////
  PositionErrorEval(const Eigen::Vector3d &meas_r_21_in1,
                    const se3::TransformStateVar::Ptr &T_20,
                    const se3::TransformStateVar::Ptr &T_10);

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Returns whether or not an evaluator contains unlocked state variables
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual bool isActive() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Evaluate the 3-d measurement error
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::Matrix<double, 3, 1> evaluate() const;

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Evaluate the 3-d measurement error and Jacobians
  //////////////////////////////////////////////////////////////////////////////////////////////
  virtual Eigen::Matrix<double, 3, 1> evaluate(const Eigen::Matrix<double, 3, 3> &lhs,
                                               std::vector<Jacobian<3, 6> > *jacs) const;

private:

  //////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Error evaluator
  //////////////////////////////////////////////////////////////////////////////////////////////
  se3::PositionEvaluator::ConstPtr positionEvaluator_;

  Eigen::Vector3d meas_;
};

} // steam


#endif //STEAM_POSITION_ERROR_EVALUATOR_HPP
