//////////////////////////////////////////////////////////////////////////////////////////////
/// \file HuberLossFunc.cpp
///
/// \author Sean Anderson, ASRL
//////////////////////////////////////////////////////////////////////////////////////////////

#include <steam/problem/lossfunc/HuberLossFunc.hpp>

namespace steam {

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Cost function (basic evaluation of the loss function)
//////////////////////////////////////////////////////////////////////////////////////////////
double HuberLossFunc::cost(double whitened_error_norm) const {
  double e2 = whitened_error_norm*whitened_error_norm;
  double abse = fabs(whitened_error_norm); // should already be positive anyway ...
  if (abse <= k_) {
    return 0.5*e2;
  } else {
    return k_*(abse - 0.5*k_);
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Weight for iteratively reweighted least-squares (influence function div. by error)
//////////////////////////////////////////////////////////////////////////////////////////////
double HuberLossFunc::weight(double whitened_error_norm) const {
  double abse = fabs(whitened_error_norm); // should already be positive anyway ...
  if (abse <= k_) {
    return 1.0;
  } else {
    return k_/abse;
  }
}

} // steam
